FROM debian:stretch

# runc dependencies
RUN apt-get update && apt-get install -y \
        wget \
        git \
        make \
        pkg-config \
        gcc \
        libseccomp-dev \
        libapparmor-dev \
        libselinux1-dev && \
    rm -rf /var/lib/apt/lists/*

ENV GOLANG_VERSION 1.9.4
RUN set -eux; \
    \
    arch="$(uname -m)"; \
    case "${arch##*-}" in \
        x86_64 | amd64) ARCH='amd64' ;; \
        ppc64el | ppc64le) ARCH='ppc64le' ;; \
        *) echo "unsupported architecture" ; exit 1 ;; \
    esac; \
    wget -O - https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-${ARCH}.tar.gz \
    | tar -v -C /usr/local -xz

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN go get github.com/LK4D4/vndr

# packaging dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        dh-make \
        fakeroot \
        devscripts && \
    rm -rf /var/lib/apt/lists/*

# packaging
ARG PKG_VERS
ARG PKG_REV
ARG PKG_ARCH

ENV DEBFULLNAME "NVIDIA CORPORATION"
ENV DEBEMAIL "cudatools@nvidia.com"
ENV REVISION "$PKG_VERS-$PKG_REV"
ENV DISTRIB "UNRELEASED"
ENV SECTION ""

# output directory
ENV DIST_DIR=/tmp/nvidia-container-runtime-$PKG_VERS
RUN mkdir -p $DIST_DIR

# runc
WORKDIR $GOPATH/src/github.com/opencontainers/runc

ARG RUNC_COMMIT
COPY runc/$RUNC_COMMIT/ /tmp/patches/runc
RUN git clone https://github.com/docker/runc.git . && \
    git fetch https://github.com/opencontainers/runc.git && \
    git checkout $RUNC_COMMIT && \
    git apply /tmp/patches/runc/* && \
    if [ -f vendor.conf ]; then vndr; fi && \
    make BUILDTAGS="seccomp apparmor selinux" && \
    mv runc $DIST_DIR/nvidia-container-runtime

# nvidia-container-runtime-hook
COPY nvidia-container-runtime-hook/ $GOPATH/src/nvidia-container-runtime-hook

RUN go get -v nvidia-container-runtime-hook && \
    mv $GOPATH/bin/nvidia-container-runtime-hook $DIST_DIR/nvidia-container-runtime-hook

COPY config.toml.stretch $DIST_DIR/config.toml

WORKDIR $DIST_DIR
COPY debian ./debian

RUN dch --create --package nvidia-container-runtime -v "$REVISION" "v$REVISION" -D "$DISTRIB" && \
    dch -r ""

CMD debuild -eSECTION --dpkg-buildpackage-hook='sh debian/prepare' -i -us -uc -b && \
    mv /tmp/nvidia-container-runtime_*.deb /dist
